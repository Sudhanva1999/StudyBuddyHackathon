{"transcript": {"text": "CS5500: Foundations of Software Engineering  Syllabus  Catalog Description This course covers the foundations of software engineering, including software development life cycle models (e.g., waterfall, incremental, agile); requirements analysis; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration. Includes a course project where some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting.  Course Outcomes \u00a7 Build necessary skills to develop, manage, and maintain software.  \u00a7 Learn how to collect and define requirements for a software project.  \u00a7 Develop the skills to collaborate and manage teams in a software project.  \u00a7 Gain experience in full-stack development using a formal software engineering process.   Major Topics 1. Software processes \u00a7 Software process models \n\u00a7 Types of software process models 2. Requirements engineering \u00a7 Methods to define and manage requirements 3. Software architecture \u00a7 Architectural and design patterns 4. System modeling \u00a7 Modeling tools such as UML 5. Software testing \u00a7 Test-driven development \u00a7 Behavior-driven development 6. Software maintenance & evolution \u00a7 Continuous integration and delivery processes 7. Software Security \u00a7 Threat modeling \u00a7 Vulnerability detection and prevention All course material for the course will be distributed through Canvas.  The Tech Stack This course emphasizes hands-on experience with software engineering. Hence, you will apply software engineering concepts learned throughout the course to design, implement, test, and deliver/deploy a full-stack web application. To this end, we will use a combination of front-end and back-end frameworks, specifically Typescript, React, Node, Express, and MongoDB. All programming-related activities will use this tech \nstack. We will use modern software engineering tools that are applicable to this tech stack.   While the instructor will cover all aspects of the tech stack during lecture, you are expected to learn the basic concepts of the Typescript language on your own. To this end, we have provided relevant self-study sources and a practice lab in Canvas for you to get up to speed with TypeScript (See module on Programming: Self Study). We recommend that you finish this module before January 17th, 2025.   For the final project, you are allowed to use a different tech stack, however, you must make sure that all the tools that you are required to use in the final project are available in your chosen tech stack. The course staff is not guaranteed to provide support if you choose a different tech stack than what we are going to use for the assignments and other prorgramming-related activities.  Why this tech stack? We use this tech stack because it is widely used in industry and has support for all the tools we need to illustrate the various aspects of the software engineering process. We believe that you learn the broad concepts and gain practice in applying the concepts using one set of tools, you will be able to transfer those skills into another set of tools. Moreover, adapting to tools and tech stacks that you haven't worked with before is an essential skill in software engineering.   Course Meeting Times \nCS5500  Section 1 MR 11:45 \u2013 1:25 PM West Village H 108. CS5500 Section  2 TF 1:35 \u2013 3:15 PM West Village H 108. Both sections will cover the same material. Every attempt will be made to sync the two sections.   Recommended Textbooks \u00a7 Software Engineering, 10th Edition, by Ian Sommerville.  \u00a7 Refactoring: Improving the design of existing code by Martin Fowler and Kent Beck. \u00a7 UML Distilled by Martin Fowler. \u00a7 Polyglot Persistence by Martin Fowler and Pramod Sadalage. \u00a7 User Stories Applied: For Agile Software Development by Mike Cohn. \u00a7 Value Sensitive Design: Shaping technology with moral imagination by Batya Friedman and David G. Hendry.  Piazza \u00a7 The Piazza discussion board should be used for all communication with the teaching staff for questions about the course assignments and material. Email should be sent \nto individual instructors or teaching assistants only to schedule appointments. \u00a7 Piazza is a forum for additional learning and assistance. The following are not appropriate uses of Piazza: \u00a7 cyber-bullying \u00a7 posting memes \u00a7 complaining about a grade \u00a7 airing concerns/comments/criticisms about the course \u00a7 posting more than a few lines of source code from an attempt at a programming exercise or assignment \u00a7 posting the solution to an assignment or a link to a website containing the solution \u00a7 in general, anything unrelated to the course material and student learning \u00a7 Therefore, students are expected to use the Piazza forum for all non-personal, course-related communication. Questions about what an assignment is asking, technical problems that need troubleshooting, or other questions that might be of interest to other students must be posted to Piazza and not emailed to the instructor or a TA. \u00a7 If code is relevant to your Piazza question you may post only short code snippets. For more extensive help with reviewing or debugging your code, please visit office hours.  Email Etiquette \u00a7 Be professional and respectful. \n\u00a7 Begin your emails appropriately (e.g., Dear Prof. Mitra or just Joydeep). \u00a7 Email the course staff under the following circumstances: \u00a7 Canvas is not properly displaying a grade. \u00a7 One cannot attend office hours and would like to schedule an appointment to meet at another time. In this case, the student should include their availability for the upcoming week. \u00a7 If a student needs to contact the course staff about a private matter. Examples include: \u00a7 Making arrangements for disability accommodations. \u00a7 To discuss private, personal matters that are impacting one's coursework such as physical or mental illness, death in the family, etc. \u00a7 When emailing the instructor about the course, students should observe the following guidelines to ensure a timely response: \u00a7 use one's official @northeastern.edu email account \u00a7 use a descriptive subject line that includes \"CS 5500\" and a brief note on the topic (e.g., \"CS 5500: Appointment\")  Recordings Lectures will be recorded but will only be available on request to students who missed class due to illness or other emergency situations. As a general policy, students are expected to come to \nclass and actively participate in class discussions. The exercises accompanying each module can be completed most effectively if students come to class and participate in the discussions.  Assessments and Grading Exercises Lectures will be accompanied by exercises. These exercises will be either programming labs or discussion posts based on material covered in the lecture or additional readings. All exercises and their solution will be discussed by the instructor in class. Students are encouraged to come up with the solutions in class during time set out for peer discussion.  Assignments Assignments will be a combination of programming activities and software engineering process activities. There will be two individual projects to help students learn the tech stack needed to complete the final group project and explore different software architectures. The remaining assignments will be related to software engineering activities such as system modeling, testing, and threat modeling.  All assignments, except the assignment on threat modeling, must be completed individually. The threat modeling assignment is a group assignment.   Final Project \nThe final project is a group project. Groups are expected to do the following: \u00a7 Submit a proposal with the list of features they plan to implement.  \u00a7 Implementation and tests for the proposed features. \u00a7 The submission must include a project management plan and a continuous integration process. \u00a7 A presentation describing the key features, the development methodology, and challenges faced.  Group Work Policy Students are expected to form their own groups. Each group must have exactly two members. If students are unable to form groups then the course staff will assign them to a group. The course staff will attempt to group students with similar prior experience with the tech stack, however this is not guaranteed. Each group member will receive the same grade as the group's. However, individual grades may be adjusted if a student feels that their group members have not contributed equally and if there is evidence of unequal work distribution from git logs. Members in a group will have the opportunity to submit an evaluation of their group members anonymously.  Late Policy All exercises i.e., discussion posts and labs, and individual assignments can be submitted up to 48 hours late without any penalty. Group assignments cannot be submitted late. \nStudents who take this course are often surprised by just how much time this course requires of them. You are advised to budget your time wisely and to start working on an assignment the day it is posted.   Re-grades Any grading errors you believe you have found on a homework submission must be emailed to j.mitra@northeastern.edu with the subject line \"CS 5500: regrade request for Assignment X\". Time is a precious commodity, so please do not spend instructor office hours or TA office hours arguing about points. Regrade requests must be made in writing no later than one week after graded work is returned to the class. Regrade requests that are made later than one week from the date the graded work is returned to the class will not be honored.  Grading Scheme \u00a7 Assignments: 45% There will be five assignments -- two individual projects and three software engineering (SE) specific assignments. If there is additional time then I will add a sixth assignment (SE) to be completed individually. If I do I will announce it at least three weeks before the sixth assignment is released. Regardless the breakdown of the assignments are as follows: 1. 25% individual projects 2. 20% SE assignments \u00a7 Exercises: 10% \n\u00a7 Final Project: 30% 1. Proposal: 5% 2. Final Submission: 25% \u00a7 Final Presentation:  15%  Course Grade Cutoffs:     A [93-100],   A- [90-93),   B+ [87-90),   B [83-87),   B- [80-83),   C+ [77-80),   C [73-77),   C- [70-73),   F [0-70).  Course grade cutoffs are flexible and subject to change. Final scores will not be rounded.  Academic Integrity Each student must pursue their academic goals honestly and be personally accountable for all submitted work. Representing another person's work as your own is always wrong. Faculty are required to report any suspected instances of academic dishonesty to OSCCR. For more comprehensive information on academic integrity, including categories of academic dishonesty, please refer to the OSCCR website at https://osccr.sites.northeastern.edu/academic-integrity-policy/ and the Khoury website at https://www.khoury.northeastern.edu/information-for-\noverview/current-undergrad/undergraduate-advising-academic-support/academic-policies/.  Violation of academic integrity on any assigned homework will lead to a 0 on that homework. Repeated violations will result in a failing grade for the course. Violation of academic integrity on the final project will also result in a failing grade for the course.  Generative AI Policy You are allowed to use Generative AI tools like ChatGPT and others for the individual projects and the final project. These tools are increasingly becoming a part of the software engineering process, hence we allow you to use them in this course. However, you must not use these tools for written assignments such as discussions and other non-programming related assignments. Using them in such contexts will be considered a violation of academic integrity and the usual penalty for academic integrity violation outlined above will apply. If you are unsure check with the course staff before using it.  Students with Disabilities Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Access Services. If you have already done so, please provide your letter from the DRC to me early in the semester so that I can arrange those accommodations. Inclusivity \nName and Pronoun Usage As this course includes class discussion, it is vitally important for us to create an educational environment of inclusion and mutual respect. This includes the ability for all students to have their chosen gender pronoun(s) and chosen name a<irmed. If the class roster does not align with your name and/or pronouns, please inform the instructor of the necessary changes.  Inclusion Statement We believe diversity and inclusiveness are essential to excellence in academic discourse and innovation. In this class, the perspective of people of all races, ethnicities, gender expressions and gender identities, religions, sexual orientations, disabilities, socioeconomic backgrounds, and nationalities will be respected and viewed as a resource and bene\ufb01t throughout the semester. Suggestions to further diversify class materials and assignments are encouraged. If any course meetings con\ufb02ict with your religious events, please do not hesitate to reach out to your instructor to make alternative arrangements. You are expected to treat your instructor and all other participants in the course with courtesy and respect. Disrespectful conduct and harassing statements will not be tolerated and may result in disciplinary actions. \n", "confidence": 1.0}, "summary": "# CS5500: Foundations of Software Engineering - Lecture Notes\n\n## I. Introduction\n\nThis course provides a foundation in software engineering principles and practices, covering the entire software development lifecycle.  Students will gain both theoretical and practical experience through lectures, exercises, assignments, and a final group project. The course emphasizes hands-on experience through the development of a full-stack web application.\n\n## II. Course Objectives\n\nUpon successful completion of this course, students will be able to:\n\n*   Build necessary skills to develop, manage, and maintain software.\n*   Learn how to collect and define requirements for a software project.\n*   Develop the skills to collaborate and manage teams in a software project.\n*   Gain experience in full-stack development using a formal software engineering process.\n\n## III. Major Topics Covered\n\n1.  **Software Processes:**\n    *   Software process models (e.g., waterfall, incremental, agile)\n    *   Types of software process models and their applicability in different scenarios.\n    *   Emphasis on Agile methodologies and their practical application.\n\n2.  **Requirements Engineering:**\n    *   Methods to define and manage requirements.\n    *   Techniques for eliciting, analyzing, specifying, and validating requirements.\n    *   Understanding user stories and their role in Agile development.\n\n3.  **Software Architecture:**\n    *   Architectural and design patterns.\n    *   Understanding different architectural styles (e.g., microservices, layered architecture).\n    *   Applying design patterns to solve common software design problems.\n\n4.  **System Modeling:**\n    *   Modeling tools such as UML.\n    *   Creating various UML diagrams (e.g., use case diagrams, class diagrams, sequence diagrams).\n    *   Using models to communicate and document software design.\n\n5.  **Software Testing:**\n    *   Test-driven development (TDD).\n    *   Behavior-driven development (BDD).\n    *   Different testing techniques (unit testing, integration testing, system testing, acceptance testing).\n\n6.  **Software Maintenance & Evolution:**\n    *   Continuous integration and delivery processes.\n    *   Version control systems (e.g., Git).\n    *   Strategies for managing software evolution and change.\n\n7.  **Software Security:**\n    *   Threat modeling.\n    *   Vulnerability detection and prevention.\n    *   Secure coding practices.\n\n## IV. Technology Stack\n\nThe course utilizes a modern technology stack commonly used in industry:\n\n*   **TypeScript:** A typed superset of JavaScript for enhanced code maintainability. (Self-study required before January 17th, 2025. Resources provided on Canvas).\n*   **React:** A JavaScript library for building user interfaces.\n*   **Node.js & Express:** A JavaScript runtime environment and web framework for back-end development.\n*   **MongoDB:** A NoSQL database for data storage.\n\nWhile the instructor will cover these technologies, students are expected to familiarize themselves with TypeScript basics independently.  Students are permitted to use a different tech stack for the final project, but support may be limited. This stack was chosen for its industry relevance and comprehensive tool support for demonstrating software engineering concepts.\n\n## V. Course Logistics\n\n*   **Course Meeting Times:**  See syllabus for specific section times and locations.\n*   **Recommended Textbooks:** See syllabus for a list of recommended textbooks covering various software engineering topics.\n*   **Communication:**  Piazza will be used for all course-related communication. Email should only be used for personal matters or scheduling appointments.  See syllabus for Piazza etiquette.\n*   **Recordings:** Lectures will be recorded and made available upon request for students who miss class due to illness or emergencies. Regular attendance and participation are strongly encouraged.\n\n## VI. Assessments and Grading\n\n*   **Exercises (10%):** Programming labs and discussion posts related to lecture material. Solutions will be discussed in class.\n*   **Assignments (45%):**\n    *   Two individual projects focusing on the tech stack and different software architectures (25%).\n    *   Three (potentially four) assignments on software engineering activities like system modeling, testing, and threat modeling (20%).  The threat modeling assignment will be done in groups.\n*   **Final Project (30% & 15%):** A group project culminating in a working software application, a project management plan, a continuous integration process, and a presentation. (Proposal 5%, Final Submission 25%, Presentation 15%).\n*   **Grading Scheme:** See syllabus for detailed grading breakdown and letter grade cutoffs.\n\n## VII. Course Policies\n\n*   **Group Work Policy:**  Groups of two will be formed for the final project. Self-formed groups are preferred, but the staff will assign groups if necessary.  Unequal contribution will affect individual grades.\n*   **Late Policy:** Exercises and individual assignments can be submitted up to 48 hours late without penalty.  Group assignments cannot be submitted late.\n*   **Re-grades:** Regrade requests must be submitted in writing within one week of graded work being returned.\n*   **Academic Integrity:**  Representing another's work as your own is strictly prohibited and will result in penalties.\n*   **Generative AI Policy:** Permitted for individual and final projects, but *not* for written assignments.\n*   **Students with Disabilities:** Contact Disability Access Services for accommodations.\n*   **Inclusivity:** The course strives to create a respectful and inclusive environment.  Inform the instructor of any preferred name or pronoun changes.\n\n## VIII. Key Takeaways\n\nThis course aims to provide a comprehensive introduction to software engineering principles and practices.  Students will gain hands-on experience with a modern tech stack, learn about various software development processes, and develop essential skills in requirements engineering, architecture, testing, maintenance, and security.  Active participation and engagement with the course material are crucial for success.\n", "notes": "# CS5500: Foundations of Software Engineering - Comprehensive Lecture Notes\n\n## I. Introduction\n\nThis course provides a comprehensive introduction to the principles and practices of software engineering, encompassing the entire software development lifecycle (SDLC).  The course blends theoretical knowledge with practical, hands-on experience through lectures, exercises, assignments, and a culminating group project centered around developing a full-stack web application.\n\n## II. Course Objectives\n\nUpon successful completion of CS5500, students will be able to:\n\n*   Develop the necessary skills to design, develop, manage, and maintain software systems.\n*   Elicit, analyze, specify, and validate requirements for software projects.\n*   Effectively collaborate and manage teams within a software project context.\n*   Gain practical experience in full-stack development utilizing a formal software engineering process.\n\n## III. Major Topics Covered\n\nThis course covers a wide range of essential software engineering topics:\n\n1.  **Software Processes:**\n    *   **Software Process Models:** Explore various software development process models, including waterfall, incremental, and agile. Understand the strengths and weaknesses of each model and their applicability to different project scenarios.  This course emphasizes Agile methodologies and their practical implementation.\n    *   **Agile Development:** Deep dive into the principles and practices of Agile development, focusing on iterative development, continuous feedback, and customer collaboration.\n\n2.  **Requirements Engineering:**\n    *   **Requirements Definition and Management:** Learn techniques for defining, documenting, and managing software requirements throughout the SDLC.\n    *   **Elicitation, Analysis, Specification, and Validation:**  Master the processes of gathering, analyzing, documenting, and validating requirements to ensure they accurately reflect user needs and business goals.\n    *   **User Stories:** Understand the concept and practical application of user stories in Agile development as a means of capturing user needs and driving development iterations.\n\n3.  **Software Architecture:**\n    *   **Architectural and Design Patterns:**  Study common architectural and design patterns that provide reusable solutions to recurring software design problems.  This includes understanding the context in which specific patterns are applicable.\n    *   **Architectural Styles:**  Explore different architectural styles such as microservices, layered architecture, and client-server, understanding their trade-offs and suitability for various systems.\n\n4.  **System Modeling:**\n    *   **UML (Unified Modeling Language):**  Learn to use UML, a standard visual modeling language, to represent and communicate software design.\n    *   **UML Diagrams:**  Practice creating various UML diagrams, including use case diagrams, class diagrams, sequence diagrams, and activity diagrams, to document and visualize different aspects of a system.\n\n5.  **Software Testing:**\n    *   **Test-Driven Development (TDD):**  Learn the principles and practices of TDD, where tests are written before the code, driving the design and implementation process.\n    *   **Behavior-Driven Development (BDD):** Understand BDD, an extension of TDD that focuses on defining system behavior from a user perspective using a common language understood by both developers and stakeholders.\n    *   **Testing Techniques:**  Explore different software testing techniques, including unit testing, integration testing, system testing, and acceptance testing, to ensure software quality and reliability.\n\n6.  **Software Maintenance & Evolution:**\n    *   **Continuous Integration and Continuous Delivery (CI/CD):**  Learn how to implement CI/CD pipelines to automate the build, test, and deployment processes, enabling faster and more reliable software releases.\n    *   **Version Control Systems (e.g., Git):**  Master the use of Git for version control, collaboration, and managing changes to the software codebase.\n    *   **Software Evolution Management:**  Understand strategies for managing software evolution and adapting to changing requirements and technological advancements.\n\n7.  **Software Security:**\n    *   **Threat Modeling:**  Learn how to identify and assess potential security threats to a software system through threat modeling.\n    *   **Vulnerability Detection and Prevention:**  Explore techniques for detecting and preventing common software vulnerabilities.\n    *   **Secure Coding Practices:**  Adopt secure coding practices to minimize security risks and build robust and secure software systems.\n\n\n## IV. Technology Stack\n\nThe course utilizes the following modern technology stack:\n\n*   **TypeScript:** A typed superset of JavaScript that enhances code maintainability and scalability. _(Self-study of TypeScript basics is required before January 17th, 2025. Resources are available on Canvas.)_\n*   **React:** A JavaScript library for building user interfaces, widely adopted for its component-based approach and efficient rendering.\n*   **Node.js & Express:** A JavaScript runtime environment and web framework, respectively, used for back-end development.  They provide a powerful platform for building scalable and performant web applications.\n*   **MongoDB:** A NoSQL document database that offers flexibility and scalability for data storage.\n\nWhile the instructor will cover these technologies, independent learning of TypeScript basics is essential. Students can choose a different tech stack for the final project, but support may be limited. This chosen stack reflects industry relevance and provides comprehensive tools for demonstrating software engineering concepts.\n\n## V. Course Logistics\n\n*   **Course Meeting Times:** Refer to the syllabus for specific section times and classroom locations.\n*   **Recommended Textbooks:**  The syllabus contains a list of recommended textbooks covering various software engineering topics in greater depth.\n*   **Communication:** Piazza is the primary platform for all course-related communication. Email should be reserved for personal matters or scheduling appointments with the instructor. Piazza etiquette guidelines are outlined in the syllabus.\n*   **Recordings:** Lecture recordings will be made available upon request for students who miss class due to illness or emergencies. Regular attendance and active participation are strongly encouraged.\n\n## VI. Assessments and Grading\n\n*   **Exercises (10%):**  Includes programming labs and discussion posts related to lecture material. Solutions will be reviewed and discussed in class.\n*   **Assignments (45%):**\n    *   Two individual projects focusing on the tech stack and different software architectures (25%).\n    *   Three (potentially four) assignments covering software engineering activities like system modeling, testing, and threat modeling (20%). The threat modeling assignment will be conducted in groups.\n*   **Final Project (30% & 15%):**  A group project culminating in a working software application, accompanied by a project management plan, a continuous integration process, and a final presentation. (Proposal 5%, Final Submission 25%, Presentation 15%).\n*   **Grading Scheme:** Refer to the syllabus for a detailed grading breakdown and letter grade cutoffs.\n\n## VII. Course Policies\n\n*   **Group Work Policy:** The final project will be completed in groups of two. Self-formed groups are preferred; otherwise, the staff will assign groups.  Unequal contribution within a group will impact individual grades.\n*   **Late Policy:** Exercises and individual assignments can be submitted up to 48 hours late without penalty. Group assignments have strict deadlines and cannot be submitted late.\n*   **Re-grades:** Regrade requests must be submitted in writing within one week of the graded work being returned.\n*   **Academic Integrity:** Representing another's work as your own is strictly prohibited and will result in serious penalties.\n*   **Generative AI Policy:** Permitted for individual and final projects, but strictly *prohibited* for written assignments.  Using generative AI for written assignments will be considered a violation of academic integrity.\n*   **Students with Disabilities:** Contact Disability Access Services for necessary accommodations.\n*   **Inclusivity:** The course fosters a respectful and inclusive environment. Inform the instructor of any preferred name or pronoun changes.\n\n\n## VIII. Key Takeaways\n\nCS5500 provides a solid foundation in software engineering principles and best practices.  Students will gain hands-on experience with a modern technology stack, learn various software development processes, and develop essential skills in requirements engineering, architecture, testing, maintenance, and security. Active participation and consistent engagement with the course material are crucial for success. Remember that this course is demanding, so plan your time accordingly and begin working on assignments promptly.\n", "flashcards": []}