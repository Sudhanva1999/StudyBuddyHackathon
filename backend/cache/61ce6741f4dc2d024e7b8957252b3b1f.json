{"transcript": {"text": "CS5500: Foundations of Software Engineering  Syllabus  Catalog Description This course covers the foundations of software engineering, including software development life cycle models (e.g., waterfall, incremental, agile); requirements analysis; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration. Includes a course project where some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting.  Course Outcomes \u00a7 Build necessary skills to develop, manage, and maintain software.  \u00a7 Learn how to collect and define requirements for a software project.  \u00a7 Develop the skills to collaborate and manage teams in a software project.  \u00a7 Gain experience in full-stack development using a formal software engineering process.   Major Topics 1. Software processes \u00a7 Software process models \n\u00a7 Types of software process models 2. Requirements engineering \u00a7 Methods to define and manage requirements 3. Software architecture \u00a7 Architectural and design patterns 4. System modeling \u00a7 Modeling tools such as UML 5. Software testing \u00a7 Test-driven development \u00a7 Behavior-driven development 6. Software maintenance & evolution \u00a7 Continuous integration and delivery processes 7. Software Security \u00a7 Threat modeling \u00a7 Vulnerability detection and prevention All course material for the course will be distributed through Canvas.  The Tech Stack This course emphasizes hands-on experience with software engineering. Hence, you will apply software engineering concepts learned throughout the course to design, implement, test, and deliver/deploy a full-stack web application. To this end, we will use a combination of front-end and back-end frameworks, specifically Typescript, React, Node, Express, and MongoDB. All programming-related activities will use this tech \nstack. We will use modern software engineering tools that are applicable to this tech stack.   While the instructor will cover all aspects of the tech stack during lecture, you are expected to learn the basic concepts of the Typescript language on your own. To this end, we have provided relevant self-study sources and a practice lab in Canvas for you to get up to speed with TypeScript (See module on Programming: Self Study). We recommend that you finish this module before January 17th, 2025.   For the final project, you are allowed to use a different tech stack, however, you must make sure that all the tools that you are required to use in the final project are available in your chosen tech stack. The course staff is not guaranteed to provide support if you choose a different tech stack than what we are going to use for the assignments and other prorgramming-related activities.  Why this tech stack? We use this tech stack because it is widely used in industry and has support for all the tools we need to illustrate the various aspects of the software engineering process. We believe that you learn the broad concepts and gain practice in applying the concepts using one set of tools, you will be able to transfer those skills into another set of tools. Moreover, adapting to tools and tech stacks that you haven't worked with before is an essential skill in software engineering.   Course Meeting Times \nCS5500  Section 1 MR 11:45 \u2013 1:25 PM West Village H 108. CS5500 Section  2 TF 1:35 \u2013 3:15 PM West Village H 108. Both sections will cover the same material. Every attempt will be made to sync the two sections.   Recommended Textbooks \u00a7 Software Engineering, 10th Edition, by Ian Sommerville.  \u00a7 Refactoring: Improving the design of existing code by Martin Fowler and Kent Beck. \u00a7 UML Distilled by Martin Fowler. \u00a7 Polyglot Persistence by Martin Fowler and Pramod Sadalage. \u00a7 User Stories Applied: For Agile Software Development by Mike Cohn. \u00a7 Value Sensitive Design: Shaping technology with moral imagination by Batya Friedman and David G. Hendry.  Piazza \u00a7 The Piazza discussion board should be used for all communication with the teaching staff for questions about the course assignments and material. Email should be sent \nto individual instructors or teaching assistants only to schedule appointments. \u00a7 Piazza is a forum for additional learning and assistance. The following are not appropriate uses of Piazza: \u00a7 cyber-bullying \u00a7 posting memes \u00a7 complaining about a grade \u00a7 airing concerns/comments/criticisms about the course \u00a7 posting more than a few lines of source code from an attempt at a programming exercise or assignment \u00a7 posting the solution to an assignment or a link to a website containing the solution \u00a7 in general, anything unrelated to the course material and student learning \u00a7 Therefore, students are expected to use the Piazza forum for all non-personal, course-related communication. Questions about what an assignment is asking, technical problems that need troubleshooting, or other questions that might be of interest to other students must be posted to Piazza and not emailed to the instructor or a TA. \u00a7 If code is relevant to your Piazza question you may post only short code snippets. For more extensive help with reviewing or debugging your code, please visit office hours.  Email Etiquette \u00a7 Be professional and respectful. \n\u00a7 Begin your emails appropriately (e.g., Dear Prof. Mitra or just Joydeep). \u00a7 Email the course staff under the following circumstances: \u00a7 Canvas is not properly displaying a grade. \u00a7 One cannot attend office hours and would like to schedule an appointment to meet at another time. In this case, the student should include their availability for the upcoming week. \u00a7 If a student needs to contact the course staff about a private matter. Examples include: \u00a7 Making arrangements for disability accommodations. \u00a7 To discuss private, personal matters that are impacting one's coursework such as physical or mental illness, death in the family, etc. \u00a7 When emailing the instructor about the course, students should observe the following guidelines to ensure a timely response: \u00a7 use one's official @northeastern.edu email account \u00a7 use a descriptive subject line that includes \"CS 5500\" and a brief note on the topic (e.g., \"CS 5500: Appointment\")  Recordings Lectures will be recorded but will only be available on request to students who missed class due to illness or other emergency situations. As a general policy, students are expected to come to \nclass and actively participate in class discussions. The exercises accompanying each module can be completed most effectively if students come to class and participate in the discussions.  Assessments and Grading Exercises Lectures will be accompanied by exercises. These exercises will be either programming labs or discussion posts based on material covered in the lecture or additional readings. All exercises and their solution will be discussed by the instructor in class. Students are encouraged to come up with the solutions in class during time set out for peer discussion.  Assignments Assignments will be a combination of programming activities and software engineering process activities. There will be two individual projects to help students learn the tech stack needed to complete the final group project and explore different software architectures. The remaining assignments will be related to software engineering activities such as system modeling, testing, and threat modeling.  All assignments, except the assignment on threat modeling, must be completed individually. The threat modeling assignment is a group assignment.   Final Project \nThe final project is a group project. Groups are expected to do the following: \u00a7 Submit a proposal with the list of features they plan to implement.  \u00a7 Implementation and tests for the proposed features. \u00a7 The submission must include a project management plan and a continuous integration process. \u00a7 A presentation describing the key features, the development methodology, and challenges faced.  Group Work Policy Students are expected to form their own groups. Each group must have exactly two members. If students are unable to form groups then the course staff will assign them to a group. The course staff will attempt to group students with similar prior experience with the tech stack, however this is not guaranteed. Each group member will receive the same grade as the group's. However, individual grades may be adjusted if a student feels that their group members have not contributed equally and if there is evidence of unequal work distribution from git logs. Members in a group will have the opportunity to submit an evaluation of their group members anonymously.  Late Policy All exercises i.e., discussion posts and labs, and individual assignments can be submitted up to 48 hours late without any penalty. Group assignments cannot be submitted late. \nStudents who take this course are often surprised by just how much time this course requires of them. You are advised to budget your time wisely and to start working on an assignment the day it is posted.   Re-grades Any grading errors you believe you have found on a homework submission must be emailed to j.mitra@northeastern.edu with the subject line \"CS 5500: regrade request for Assignment X\". Time is a precious commodity, so please do not spend instructor office hours or TA office hours arguing about points. Regrade requests must be made in writing no later than one week after graded work is returned to the class. Regrade requests that are made later than one week from the date the graded work is returned to the class will not be honored.  Grading Scheme \u00a7 Assignments: 45% There will be five assignments -- two individual projects and three software engineering (SE) specific assignments. If there is additional time then I will add a sixth assignment (SE) to be completed individually. If I do I will announce it at least three weeks before the sixth assignment is released. Regardless the breakdown of the assignments are as follows: 1. 25% individual projects 2. 20% SE assignments \u00a7 Exercises: 10% \n\u00a7 Final Project: 30% 1. Proposal: 5% 2. Final Submission: 25% \u00a7 Final Presentation:  15%  Course Grade Cutoffs:     A [93-100],   A- [90-93),   B+ [87-90),   B [83-87),   B- [80-83),   C+ [77-80),   C [73-77),   C- [70-73),   F [0-70).  Course grade cutoffs are flexible and subject to change. Final scores will not be rounded.  Academic Integrity Each student must pursue their academic goals honestly and be personally accountable for all submitted work. Representing another person's work as your own is always wrong. Faculty are required to report any suspected instances of academic dishonesty to OSCCR. For more comprehensive information on academic integrity, including categories of academic dishonesty, please refer to the OSCCR website at https://osccr.sites.northeastern.edu/academic-integrity-policy/ and the Khoury website at https://www.khoury.northeastern.edu/information-for-\noverview/current-undergrad/undergraduate-advising-academic-support/academic-policies/.  Violation of academic integrity on any assigned homework will lead to a 0 on that homework. Repeated violations will result in a failing grade for the course. Violation of academic integrity on the final project will also result in a failing grade for the course.  Generative AI Policy You are allowed to use Generative AI tools like ChatGPT and others for the individual projects and the final project. These tools are increasingly becoming a part of the software engineering process, hence we allow you to use them in this course. However, you must not use these tools for written assignments such as discussions and other non-programming related assignments. Using them in such contexts will be considered a violation of academic integrity and the usual penalty for academic integrity violation outlined above will apply. If you are unsure check with the course staff before using it.  Students with Disabilities Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Access Services. If you have already done so, please provide your letter from the DRC to me early in the semester so that I can arrange those accommodations. Inclusivity \nName and Pronoun Usage As this course includes class discussion, it is vitally important for us to create an educational environment of inclusion and mutual respect. This includes the ability for all students to have their chosen gender pronoun(s) and chosen name a<irmed. If the class roster does not align with your name and/or pronouns, please inform the instructor of the necessary changes.  Inclusion Statement We believe diversity and inclusiveness are essential to excellence in academic discourse and innovation. In this class, the perspective of people of all races, ethnicities, gender expressions and gender identities, religions, sexual orientations, disabilities, socioeconomic backgrounds, and nationalities will be respected and viewed as a resource and bene\ufb01t throughout the semester. Suggestions to further diversify class materials and assignments are encouraged. If any course meetings con\ufb02ict with your religious events, please do not hesitate to reach out to your instructor to make alternative arrangements. You are expected to treat your instructor and all other participants in the course with courtesy and respect. Disrespectful conduct and harassing statements will not be tolerated and may result in disciplinary actions. \n", "confidence": 1.0}, "summary": "## CS5500: Foundations of Software Engineering - Lecture Notes\n\nThese notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, including key concepts, topics covered, and course policies.\n\n### I. Introduction\n\nThis course provides a foundational understanding of software engineering principles and practices.  Students will gain practical experience through a course project, applying learned concepts in a team-based setting.  The emphasis is on hands-on experience, using a modern tech stack to develop a full-stack web application.\n\n### II. Course Objectives\n\nUpon successful completion of this course, students will be able to:\n\n*   Build necessary skills to develop, manage, and maintain software.\n*   Collect and define requirements for a software project.\n*   Collaborate and manage teams in a software project.\n*   Gain experience in full-stack development using a formal software engineering process.\n\n### III. Major Topics\n\nThe course will cover the following major topics:\n\n1.  **Software Processes:**\n    *   Software process models (e.g., waterfall, incremental, agile)\n    *   Types of software process models and their applications\n\n2.  **Requirements Engineering:**\n    *   Methods to define, document, and manage software requirements\n    *   Techniques for eliciting requirements from stakeholders\n\n3.  **Software Architecture:**\n    *   Architectural and design patterns (e.g., MVC, Singleton, Observer)\n    *   Principles of good software design (e.g., SOLID principles)\n\n4.  **System Modeling:**\n    *   Modeling tools such as UML (Unified Modeling Language)\n    *   Creating use case diagrams, class diagrams, and sequence diagrams\n\n5.  **Software Testing:**\n    *   Test-driven development (TDD) - writing tests before code\n    *   Behavior-driven development (BDD) - focusing on user behavior\n    *   Different testing levels (unit, integration, system, acceptance)\n\n6.  **Software Maintenance & Evolution:**\n    *   Continuous integration and continuous delivery (CI/CD) pipelines\n    *   Version control systems (e.g., Git) and branching strategies\n\n7.  **Software Security:**\n    *   Threat modeling - identifying and mitigating potential security risks\n    *   Vulnerability detection and prevention techniques\n\n### IV. Technology Stack\n\n*   **Frontend:** TypeScript, React\n*   **Backend:** Node.js, Express.js\n*   **Database:** MongoDB\n\nThis stack is chosen for its industry relevance and comprehensive tooling support for demonstrating software engineering principles.  While the instructor will cover all aspects of the tech stack, students are expected to learn basic TypeScript independently through provided resources.  Using a different tech stack for the final project is permitted, but support from course staff is not guaranteed.\n\n### V. Course Logistics\n\n*   **Course Materials:** All course materials will be distributed through Canvas.\n*   **Meeting Times:**  Specific times and locations for each section are detailed in the syllabus. Both sections cover the same material.\n*   **Recommended Textbooks:**  Several textbooks are recommended to supplement the course material and provide deeper insights into specific topics.  These include books on software engineering fundamentals, refactoring, UML, persistence, user stories, and value-sensitive design.\n\n### VI. Communication and Collaboration\n\n*   **Piazza:** The primary platform for all course-related communication, questions, and discussions.  Inappropriate uses (e.g., complaining about grades, posting solutions) are outlined in the syllabus.\n*   **Email:** Reserved for personal matters, scheduling appointments, or reporting Canvas issues.  Specific email etiquette guidelines are provided in the syllabus.\n\n### VII. Assessments and Grading\n\n*   **Exercises (10%):**  In-class programming labs and discussion posts based on lecture material.\n*   **Assignments (45%):**  A mix of individual programming projects and software engineering activities. Two individual projects focusing on the tech stack and different software architectures.  Remaining assignments cover system modeling, testing, and a group threat modeling exercise.\n*   **Final Project (30% + 15% Presentation):** A group project (groups of two) requiring a proposal, implementation, testing, project management plan, CI process, and a final presentation.\n*   **Grading Scheme:** Detailed breakdown of assignment weights and grade cutoffs are available in the syllabus.\n\n### VIII. Course Policies\n\n*   **Late Policy:**  Exercises and individual assignments have a 48-hour grace period. Group assignments cannot be submitted late.\n*   **Re-grades:**  Requests must be submitted via email within one week of receiving graded work.\n*   **Academic Integrity:**  Plagiarism and other forms of academic dishonesty are not tolerated.  Consequences include a zero on the assignment and potential course failure.\n*   **Generative AI Policy:**  Allowed for individual and final projects, but prohibited for written assignments.\n*   **Students with Disabilities:**  Accommodations are available through Disability Access Services.\n*   **Inclusivity:**  The course fosters a respectful and inclusive environment.  Students are encouraged to share their preferred names and pronouns.\n\n\n### IX. Key Takeaways\n\nThis course emphasizes practical application of software engineering principles using a modern tech stack. Active participation, collaboration, and adherence to course policies are crucial for success.  Students should familiarize themselves with the technology stack early on and manage their time effectively to handle the workload.  Leveraging resources like Piazza and office hours is encouraged for assistance and clarification.\n", "notes": "## CS5500: Foundations of Software Engineering - Detailed Lecture Notes\n\nThese notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, encompassing key concepts, topics covered, technologies used, course policies, and assessment details.\n\n### I. Introduction\n\nThis course aims to establish a strong foundation in software engineering principles and best practices.  The emphasis is on practical application, culminating in a team-based project where students develop a full-stack web application using a modern technology stack.  This hands-on approach solidifies theoretical concepts and provides valuable real-world experience.\n\n### II. Course Objectives\n\nUpon successful completion of this course, students should be proficient in:\n\n*   Developing, managing, and maintaining software systems.\n*   Eliciting, defining, documenting, and managing software requirements.\n*   Collaborating effectively within a software development team.\n*   Applying a formal software engineering process to full-stack development.\n\n### III. Major Topics Covered\n\nThe course curriculum covers the following key areas of software engineering:\n\n1.  **Software Processes:** This section explores various software development lifecycle models, their strengths, weaknesses, and applicability in different project contexts.\n    *   **Models:** Waterfall, Incremental, Agile, and other relevant models will be discussed.\n    *   **Applications:**  Understanding when to apply specific process models based on project characteristics and constraints.\n\n2.  **Requirements Engineering:**  This module focuses on effectively gathering, analyzing, documenting, and managing software requirements.\n    *   **Methods & Techniques:**  Formal and informal methods for eliciting requirements from stakeholders, managing changing requirements, and ensuring traceability.\n    *   **Documentation:**  Best practices for documenting requirements clearly and unambiguously.\n\n3.  **Software Architecture:** This section delves into the principles of sound software design and architectural patterns.\n    *   **Architectural Patterns:**  Model-View-Controller (MVC), Singleton, Observer, and other common patterns.\n    *   **Design Principles:** SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) and their application in building maintainable and extensible software.\n\n4.  **System Modeling:**  This module introduces modeling tools and techniques to visually represent system behavior and structure.\n    *   **UML (Unified Modeling Language):**  Using UML diagrams like Use Case Diagrams, Class Diagrams, and Sequence Diagrams to model different aspects of the system.\n    *   **Modeling Tools:**  Hands-on experience with software tools that support UML and other modeling techniques.\n\n5.  **Software Testing:** This section emphasizes the importance of testing throughout the software development lifecycle.\n    *   **Test-Driven Development (TDD):**  Writing tests before writing the code, fostering a test-first approach.\n    *   **Behavior-Driven Development (BDD):** Focusing on user behavior and defining acceptance criteria.\n    *   **Testing Levels:**  Understanding and applying different testing levels, including unit testing, integration testing, system testing, and acceptance testing.\n\n6.  **Software Maintenance & Evolution:**  This module addresses the ongoing process of maintaining and evolving software systems after deployment.\n    *   **Continuous Integration and Continuous Delivery (CI/CD):** Automating the build, test, and deployment processes for faster and more reliable releases.\n    *   **Version Control Systems:** Utilizing Git and understanding branching strategies for effective collaboration and code management.\n\n7.  **Software Security:** This section covers essential security concepts and practices.\n    *   **Threat Modeling:**  Identifying and mitigating potential security risks early in the development process.\n    *   **Vulnerability Detection & Prevention:** Techniques to detect and prevent common software vulnerabilities.\n\n\n### IV. Technology Stack\n\nThe course utilizes a modern and industry-relevant technology stack:\n\n*   **Frontend:** TypeScript, React\n*   **Backend:** Node.js, Express.js\n*   **Database:** MongoDB\n\nThis stack provides a robust environment for full-stack web development. While the instructor will cover the stack's core concepts, students are expected to supplement their learning with independent study, particularly for TypeScript.  Using alternative stacks for the final project is permissible, but with limited support from course staff.\n\n### V. Course Logistics\n\n*   **Course Materials:** Canvas will be the central platform for accessing all course resources, including lecture slides, assignments, and announcements.\n*   **Meeting Times:**  Refer to the course syllabus for specific meeting times and locations for each section. Both sections cover the same content.\n*   **Recommended Textbooks:**  Several recommended textbooks delve deeper into specific topics, covering software engineering fundamentals, refactoring, UML, persistence, user stories, and value-sensitive design. Consult the syllabus for the complete list.\n\n\n### VI. Communication & Collaboration\n\n*   **Piazza:** The primary platform for all course-related discussions, questions, and announcements.  Avoid using Piazza for grade complaints or posting complete assignment solutions.  Refer to the syllabus for detailed Piazza etiquette.\n*   **Email:**  Reserved for personal matters, scheduling appointments with instructors, and reporting technical issues with Canvas. Adhere to the email etiquette guidelines outlined in the syllabus.\n\n### VII. Assessments and Grading\n\nThe course grade is determined by the following components:\n\n*   **Exercises (10%):** In-class programming labs and discussion posts reinforcing lecture concepts.\n*   **Assignments (45%):** Individual programming projects, software engineering activities, including two individual projects focused on the technology stack and different software architectures. Additional assignments cover system modeling, testing, and a group threat modeling exercise.\n*   **Final Project (30% + 15% Presentation):**  A group project (groups of two) involving proposal submission, implementation, testing, project management plan, CI process, and a final presentation.\n*   **Grading Scheme:** Specific assignment weights and grade cutoffs are detailed in the syllabus.\n\n\n### VIII. Course Policies\n\n*   **Late Policy:**  Exercises and individual assignments have a 48-hour grace period.  Group assignments cannot be submitted late.\n*   **Re-grades:**  Submit re-grade requests via email within one week of receiving graded work.\n*   **Academic Integrity:**  Plagiarism and other forms of academic dishonesty are not tolerated and will result in severe penalties.\n*   **Generative AI Policy:** Permitted for individual and final projects, but prohibited for written assignments.\n*   **Students with Disabilities:** Accommodations are available through Disability Access Services. Contact the instructor with relevant documentation.\n*   **Inclusivity:** The course promotes a respectful and inclusive learning environment.  Share your preferred name and pronouns with the instructor.\n\n\n### IX. Key Takeaways\n\nThis course provides a hands-on learning experience, emphasizing the practical application of software engineering principles using a modern technology stack. Active participation, collaboration, and adherence to course policies are essential for success.  Familiarize yourself with the technology stack early on, manage your time effectively, and leverage available resources like Piazza and office hours for assistance.\n", "flashcards": []}