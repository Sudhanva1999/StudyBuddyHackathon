{"transcript": {"text": "CS5500: Foundations of Software Engineering  Syllabus  Catalog Description This course covers the foundations of software engineering, including software development life cycle models (e.g., waterfall, incremental, agile); requirements analysis; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration. Includes a course project where some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting.  Course Outcomes \u00a7 Build necessary skills to develop, manage, and maintain software.  \u00a7 Learn how to collect and define requirements for a software project.  \u00a7 Develop the skills to collaborate and manage teams in a software project.  \u00a7 Gain experience in full-stack development using a formal software engineering process.   Major Topics 1. Software processes \u00a7 Software process models \n\u00a7 Types of software process models 2. Requirements engineering \u00a7 Methods to define and manage requirements 3. Software architecture \u00a7 Architectural and design patterns 4. System modeling \u00a7 Modeling tools such as UML 5. Software testing \u00a7 Test-driven development \u00a7 Behavior-driven development 6. Software maintenance & evolution \u00a7 Continuous integration and delivery processes 7. Software Security \u00a7 Threat modeling \u00a7 Vulnerability detection and prevention All course material for the course will be distributed through Canvas.  The Tech Stack This course emphasizes hands-on experience with software engineering. Hence, you will apply software engineering concepts learned throughout the course to design, implement, test, and deliver/deploy a full-stack web application. To this end, we will use a combination of front-end and back-end frameworks, specifically Typescript, React, Node, Express, and MongoDB. All programming-related activities will use this tech \nstack. We will use modern software engineering tools that are applicable to this tech stack.   While the instructor will cover all aspects of the tech stack during lecture, you are expected to learn the basic concepts of the Typescript language on your own. To this end, we have provided relevant self-study sources and a practice lab in Canvas for you to get up to speed with TypeScript (See module on Programming: Self Study). We recommend that you finish this module before January 17th, 2025.   For the final project, you are allowed to use a different tech stack, however, you must make sure that all the tools that you are required to use in the final project are available in your chosen tech stack. The course staff is not guaranteed to provide support if you choose a different tech stack than what we are going to use for the assignments and other prorgramming-related activities.  Why this tech stack? We use this tech stack because it is widely used in industry and has support for all the tools we need to illustrate the various aspects of the software engineering process. We believe that you learn the broad concepts and gain practice in applying the concepts using one set of tools, you will be able to transfer those skills into another set of tools. Moreover, adapting to tools and tech stacks that you haven't worked with before is an essential skill in software engineering.   Course Meeting Times \nCS5500  Section 1 MR 11:45 \u2013 1:25 PM West Village H 108. CS5500 Section  2 TF 1:35 \u2013 3:15 PM West Village H 108. Both sections will cover the same material. Every attempt will be made to sync the two sections.   Recommended Textbooks \u00a7 Software Engineering, 10th Edition, by Ian Sommerville.  \u00a7 Refactoring: Improving the design of existing code by Martin Fowler and Kent Beck. \u00a7 UML Distilled by Martin Fowler. \u00a7 Polyglot Persistence by Martin Fowler and Pramod Sadalage. \u00a7 User Stories Applied: For Agile Software Development by Mike Cohn. \u00a7 Value Sensitive Design: Shaping technology with moral imagination by Batya Friedman and David G. Hendry.  Piazza \u00a7 The Piazza discussion board should be used for all communication with the teaching staff for questions about the course assignments and material. Email should be sent \nto individual instructors or teaching assistants only to schedule appointments. \u00a7 Piazza is a forum for additional learning and assistance. The following are not appropriate uses of Piazza: \u00a7 cyber-bullying \u00a7 posting memes \u00a7 complaining about a grade \u00a7 airing concerns/comments/criticisms about the course \u00a7 posting more than a few lines of source code from an attempt at a programming exercise or assignment \u00a7 posting the solution to an assignment or a link to a website containing the solution \u00a7 in general, anything unrelated to the course material and student learning \u00a7 Therefore, students are expected to use the Piazza forum for all non-personal, course-related communication. Questions about what an assignment is asking, technical problems that need troubleshooting, or other questions that might be of interest to other students must be posted to Piazza and not emailed to the instructor or a TA. \u00a7 If code is relevant to your Piazza question you may post only short code snippets. For more extensive help with reviewing or debugging your code, please visit office hours.  Email Etiquette \u00a7 Be professional and respectful. \n\u00a7 Begin your emails appropriately (e.g., Dear Prof. Mitra or just Joydeep). \u00a7 Email the course staff under the following circumstances: \u00a7 Canvas is not properly displaying a grade. \u00a7 One cannot attend office hours and would like to schedule an appointment to meet at another time. In this case, the student should include their availability for the upcoming week. \u00a7 If a student needs to contact the course staff about a private matter. Examples include: \u00a7 Making arrangements for disability accommodations. \u00a7 To discuss private, personal matters that are impacting one's coursework such as physical or mental illness, death in the family, etc. \u00a7 When emailing the instructor about the course, students should observe the following guidelines to ensure a timely response: \u00a7 use one's official @northeastern.edu email account \u00a7 use a descriptive subject line that includes \"CS 5500\" and a brief note on the topic (e.g., \"CS 5500: Appointment\")  Recordings Lectures will be recorded but will only be available on request to students who missed class due to illness or other emergency situations. As a general policy, students are expected to come to \nclass and actively participate in class discussions. The exercises accompanying each module can be completed most effectively if students come to class and participate in the discussions.  Assessments and Grading Exercises Lectures will be accompanied by exercises. These exercises will be either programming labs or discussion posts based on material covered in the lecture or additional readings. All exercises and their solution will be discussed by the instructor in class. Students are encouraged to come up with the solutions in class during time set out for peer discussion.  Assignments Assignments will be a combination of programming activities and software engineering process activities. There will be two individual projects to help students learn the tech stack needed to complete the final group project and explore different software architectures. The remaining assignments will be related to software engineering activities such as system modeling, testing, and threat modeling.  All assignments, except the assignment on threat modeling, must be completed individually. The threat modeling assignment is a group assignment.   Final Project \nThe final project is a group project. Groups are expected to do the following: \u00a7 Submit a proposal with the list of features they plan to implement.  \u00a7 Implementation and tests for the proposed features. \u00a7 The submission must include a project management plan and a continuous integration process. \u00a7 A presentation describing the key features, the development methodology, and challenges faced.  Group Work Policy Students are expected to form their own groups. Each group must have exactly two members. If students are unable to form groups then the course staff will assign them to a group. The course staff will attempt to group students with similar prior experience with the tech stack, however this is not guaranteed. Each group member will receive the same grade as the group's. However, individual grades may be adjusted if a student feels that their group members have not contributed equally and if there is evidence of unequal work distribution from git logs. Members in a group will have the opportunity to submit an evaluation of their group members anonymously.  Late Policy All exercises i.e., discussion posts and labs, and individual assignments can be submitted up to 48 hours late without any penalty. Group assignments cannot be submitted late. \nStudents who take this course are often surprised by just how much time this course requires of them. You are advised to budget your time wisely and to start working on an assignment the day it is posted.   Re-grades Any grading errors you believe you have found on a homework submission must be emailed to j.mitra@northeastern.edu with the subject line \"CS 5500: regrade request for Assignment X\". Time is a precious commodity, so please do not spend instructor office hours or TA office hours arguing about points. Regrade requests must be made in writing no later than one week after graded work is returned to the class. Regrade requests that are made later than one week from the date the graded work is returned to the class will not be honored.  Grading Scheme \u00a7 Assignments: 45% There will be five assignments -- two individual projects and three software engineering (SE) specific assignments. If there is additional time then I will add a sixth assignment (SE) to be completed individually. If I do I will announce it at least three weeks before the sixth assignment is released. Regardless the breakdown of the assignments are as follows: 1. 25% individual projects 2. 20% SE assignments \u00a7 Exercises: 10% \n\u00a7 Final Project: 30% 1. Proposal: 5% 2. Final Submission: 25% \u00a7 Final Presentation:  15%  Course Grade Cutoffs:     A [93-100],   A- [90-93),   B+ [87-90),   B [83-87),   B- [80-83),   C+ [77-80),   C [73-77),   C- [70-73),   F [0-70).  Course grade cutoffs are flexible and subject to change. Final scores will not be rounded.  Academic Integrity Each student must pursue their academic goals honestly and be personally accountable for all submitted work. Representing another person's work as your own is always wrong. Faculty are required to report any suspected instances of academic dishonesty to OSCCR. For more comprehensive information on academic integrity, including categories of academic dishonesty, please refer to the OSCCR website at https://osccr.sites.northeastern.edu/academic-integrity-policy/ and the Khoury website at https://www.khoury.northeastern.edu/information-for-\noverview/current-undergrad/undergraduate-advising-academic-support/academic-policies/.  Violation of academic integrity on any assigned homework will lead to a 0 on that homework. Repeated violations will result in a failing grade for the course. Violation of academic integrity on the final project will also result in a failing grade for the course.  Generative AI Policy You are allowed to use Generative AI tools like ChatGPT and others for the individual projects and the final project. These tools are increasingly becoming a part of the software engineering process, hence we allow you to use them in this course. However, you must not use these tools for written assignments such as discussions and other non-programming related assignments. Using them in such contexts will be considered a violation of academic integrity and the usual penalty for academic integrity violation outlined above will apply. If you are unsure check with the course staff before using it.  Students with Disabilities Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Access Services. If you have already done so, please provide your letter from the DRC to me early in the semester so that I can arrange those accommodations. Inclusivity \nName and Pronoun Usage As this course includes class discussion, it is vitally important for us to create an educational environment of inclusion and mutual respect. This includes the ability for all students to have their chosen gender pronoun(s) and chosen name a<irmed. If the class roster does not align with your name and/or pronouns, please inform the instructor of the necessary changes.  Inclusion Statement We believe diversity and inclusiveness are essential to excellence in academic discourse and innovation. In this class, the perspective of people of all races, ethnicities, gender expressions and gender identities, religions, sexual orientations, disabilities, socioeconomic backgrounds, and nationalities will be respected and viewed as a resource and bene\ufb01t throughout the semester. Suggestions to further diversify class materials and assignments are encouraged. If any course meetings con\ufb02ict with your religious events, please do not hesitate to reach out to your instructor to make alternative arrangements. You are expected to treat your instructor and all other participants in the course with courtesy and respect. Disrespectful conduct and harassing statements will not be tolerated and may result in disciplinary actions. \n", "confidence": 1.0}, "summary": "## CS5500: Foundations of Software Engineering - Lecture Notes\n\nThese notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, encompassing key topics, assignments, grading policies, and important administrative information.\n\n### I. Introduction\n\nThis course explores the fundamental principles and practices of software engineering, covering the entire software development lifecycle. Students will gain practical experience through a course project, applying learned concepts in a team-based setting.  The emphasis is on hands-on experience, culminating in the development of a full-stack web application.\n\n### II. Course Objectives\n\nUpon successful completion of this course, students will be able to:\n\n*   **Develop, Manage, and Maintain Software:** Acquire the necessary skills to effectively develop, manage, and maintain software projects.\n*   **Requirements Analysis:** Learn techniques to collect, analyze, and define requirements for software projects.\n*   **Team Collaboration and Management:** Develop skills in collaborating effectively within a team and managing software projects collaboratively.\n*   **Full-Stack Development Experience:** Gain practical experience in full-stack development using a formal software engineering process.\n\n### III. Major Topics Covered\n\nThe course covers a wide range of software engineering topics, including:\n\n1.  **Software Processes:**\n    *   Software process models (e.g., waterfall, incremental, agile)\n    *   Types and characteristics of different software process models.\n\n2.  **Requirements Engineering:**\n    *   Methods for eliciting, analyzing, documenting, and managing software requirements.\n\n3.  **Software Architecture:**\n    *   Architectural styles and patterns (e.g., microservices, MVC).\n    *   Design patterns (e.g., Singleton, Factory, Observer).\n\n4.  **System Modeling:**\n    *   Modeling tools and languages, focusing on UML (Unified Modeling Language).\n    *   Creating various UML diagrams (e.g., use case, class, sequence).\n\n5.  **Software Testing:**\n    *   Test-driven development (TDD) - writing tests before code.\n    *   Behavior-driven development (BDD) - focusing on user behavior and acceptance criteria.\n    *   Different testing strategies and techniques (unit, integration, system, acceptance).\n\n6.  **Software Maintenance & Evolution:**\n    *   Strategies for maintaining and evolving software systems.\n    *   Continuous integration and continuous delivery (CI/CD) pipelines.\n\n7.  **Software Security:**\n    *   Threat modeling - identifying and mitigating potential security threats.\n    *   Vulnerability detection and prevention techniques.\n\n### IV. Technology Stack\n\n*   **Front-end:** TypeScript, React\n*   **Back-end:** Node.js, Express.js\n*   **Database:** MongoDB\n\nThis stack is chosen for its industry relevance and comprehensive tool support for demonstrating various software engineering concepts. While the instructor will cover all aspects of the tech stack, students are expected to independently learn basic TypeScript concepts through provided self-study resources and a practice lab in Canvas, preferably before January 17th, 2025.  Students can choose a different tech stack for the final project, but support may be limited.\n\n### V. Course Logistics\n\n*   **Course Material:** All course materials will be distributed through Canvas.\n*   **Course Meeting Times:**  See syllabus for specific section times and locations. Both sections cover the same material and will be synchronized as much as possible.\n*   **Recommended Textbooks:**  A list of recommended textbooks is provided in the syllabus, covering topics from software engineering fundamentals to specific areas like refactoring, UML, and value-sensitive design.\n\n### VI. Communication\n\n*   **Piazza:**  The primary platform for all course-related communication, questions, and discussions.  Avoid using Piazza for personal matters, complaints, or sharing extensive code solutions.\n*   **Email:**  Reserve email communication for personal matters, scheduling appointments, or reporting Canvas grading issues. Use your Northeastern email address and include \"CS 5500\" in the subject line.\n\n### VII. Course Assessments and Grading\n\n*   **Exercises (10%):**  Include programming labs and discussion posts related to lecture material and readings. Solutions are discussed in class.\n*   **Assignments (45%):**  A mix of individual programming projects, software engineering process activities, and a group threat modeling assignment.  Two individual projects focus on the tech stack and exploring different software architectures.  The breakdown is 25% for individual projects and 20% for SE-specific assignments.  A possible sixth individual assignment may be added if time permits.\n*   **Final Project (30% + 15% Presentation):** A group project (groups of two) involving a proposal, implementation, testing, project management plan, continuous integration process, and a final presentation. The proposal is worth 5%, and the final submission is worth 25%. The presentation is worth 15%.\n*   **Late Policy:**  Exercises and individual assignments can be submitted up to 48 hours late without penalty. Group assignments cannot be submitted late.\n*   **Re-grades:**  Submit regrade requests via email to the instructor within one week of receiving graded work.\n\n### VIII.  Grading Scheme and Cutoffs\n\nSee the syllabus for the detailed grading breakdown and letter grade cutoffs. Note that final scores will not be rounded.\n\n\n### IX. Course Policies\n\n*   **Academic Integrity:**  Uphold academic honesty.  Representing another person's work as your own is strictly prohibited and will be reported.\n*   **Generative AI Policy:** Generative AI tools like ChatGPT are permitted for individual and final projects, but *not* for written assignments. Using them for written work is considered a violation of academic integrity.\n*   **Students with Disabilities:** Contact Disability Access Services for accommodations and inform the instructor early in the semester.\n*   **Inclusivity:**  Maintain a respectful and inclusive learning environment.  Inform the instructor of any name or pronoun preferences.\n\n\n### X. Key Takeaways\n\nThis course emphasizes practical application of software engineering principles through hands-on projects and a comprehensive final project.  Active participation, effective communication, and adherence to academic integrity policies are crucial for success. The chosen tech stack provides valuable industry-relevant skills, while allowing flexibility for exploration in the final project.  Time management is essential due to the demanding nature of the coursework. Remember to utilize Piazza for course-related questions and contact the instructor via email for personal matters.\n", "notes": "## CS5500: Foundations of Software Engineering - Comprehensive Lecture Notes\n\nThese notes consolidate information from the provided transcription and syllabus excerpts to offer a comprehensive guide to CS5500: Foundations of Software Engineering.  They cover key topics, assignments, grading, policies, and essential administrative details.\n\n### I. Introduction\n\nThis course provides a foundational understanding of software engineering principles and practices, encompassing the complete software development lifecycle. The focus is heavily practical, culminating in a team-based full-stack web application project.  Students will apply learned concepts in a real-world context, gaining invaluable experience.\n\n### II. Course Objectives\n\nBy the end of this course, students will be able to:\n\n*   **Develop, Manage, and Maintain Software:**  Master the skills required for effective software project development, management, and ongoing maintenance.\n*   **Requirements Analysis:**  Effectively gather, analyze, and precisely document software project requirements.\n*   **Team Collaboration and Management:**  Develop strong teamwork skills and collaborative project management capabilities.\n*   **Full-Stack Development Experience:**  Gain hands-on experience in full-stack development, adhering to a formal software engineering process.\n\n### III. Major Topics Covered\n\nThis course covers a broad spectrum of software engineering topics:\n\n1.  **Software Processes:**\n    *   Explore various software process models, including Waterfall, Incremental, and Agile.\n    *   Understand the characteristics and distinctions between these models and their appropriate applications.\n\n2.  **Requirements Engineering:**\n    *   Master techniques for eliciting, analyzing, documenting, and managing software requirements effectively.\n    *   Learn to translate user needs into actionable, testable requirements.\n\n3.  **Software Architecture:**\n    *   Understand architectural styles and patterns, including Microservices and Model-View-Controller (MVC).\n    *   Learn and apply common design patterns such as Singleton, Factory, and Observer to improve code structure and maintainability.\n\n4.  **System Modeling:**\n    *   Utilize modeling tools and languages, with a focus on UML (Unified Modeling Language).\n    *   Gain proficiency in creating different UML diagrams, including use case, class, and sequence diagrams, to visualize and communicate system design.\n\n5.  **Software Testing:**\n    *   Learn and practice test-driven development (TDD), emphasizing writing tests before code implementation.\n    *   Understand behavior-driven development (BDD) and its focus on user behavior and acceptance criteria.\n    *   Explore various testing strategies and techniques, including unit, integration, system, and acceptance testing.\n\n6.  **Software Maintenance & Evolution:**\n    *   Learn effective strategies for maintaining and evolving software systems over time.\n    *   Understand the principles and implementation of continuous integration and continuous delivery (CI/CD) pipelines for automated build, test, and deployment processes.\n\n7.  **Software Security:**\n    *   Learn threat modeling techniques to identify and mitigate potential security risks in software systems.\n    *   Explore vulnerability detection and prevention techniques to enhance software security.\n\n### IV. Technology Stack & Preparation\n\nThe course utilizes a modern and industry-relevant technology stack:\n\n*   **Front-end:** TypeScript, React\n*   **Back-end:** Node.js, Express.js\n*   **Database:** MongoDB\n\nThis stack offers comprehensive tool support for demonstrating software engineering concepts.  **Students are expected to independently learn basic TypeScript concepts *before* January 17th, 2025, using provided self-study resources and a practice lab in Canvas.** While this stack is preferred, students can choose a different one for the final project, understanding that support may be limited.\n\n\n### V. Course Logistics & Resources\n\n*   **Course Material:**  All course materials are accessible through Canvas.\n*   **Course Meeting Times:**  Refer to the syllabus for specific section times and locations.  Both sections cover identical material and are synchronized as much as possible.\n*   **Recommended Textbooks:**  The syllabus provides a list of recommended textbooks that delve deeper into various topics, ranging from fundamental software engineering principles to specialized areas like refactoring, UML, and value-sensitive design.\n\n### VI. Communication & Etiquette\n\n*   **Piazza:** Piazza is the primary platform for all course-related communication, questions, and discussions. Avoid using Piazza for personal matters, complaints, or sharing extensive code solutions.\n*   **Email:** Reserve email communication for personal matters, scheduling appointments, or reporting Canvas grading issues. Use your Northeastern email address and always include \"CS 5500\" in the subject line. Be professional and address the instructor appropriately.\n\n### VII. Course Assessments and Grading\n\n*   **Exercises (10%):**  These include programming labs and discussion posts related to lecture content and readings. Solutions are discussed in class.  Active participation is encouraged.\n*   **Assignments (45%):**  These include individual programming projects, software engineering process activities, and a group threat modeling assignment.  Two individual projects focus on the tech stack and exploring different software architectures. The breakdown is 25% for individual projects and 20% for SE-specific assignments. A potential sixth individual assignment might be added if time allows.\n*   **Final Project (30% + 15% Presentation):**  A group project (groups of two) requiring a proposal (5%), implementation, testing, a project management plan, a continuous integration process, and a final presentation (15%). The final submission itself is worth 25%.\n*   **Late Policy:** Exercises and individual assignments have a 48-hour grace period without penalty.  **Group assignments cannot be submitted late.**\n*   **Re-grades:** Submit regrade requests via email to the instructor within one week of receiving the graded work.\n\n\n### VIII. Grading Scheme and Cutoffs\n\nConsult the syllabus for detailed grading breakdowns and letter grade cutoffs. **Final scores are not rounded.**\n\n\n### IX.  Course Policies\n\n*   **Academic Integrity:**  Academic honesty is paramount.  Representing another person's work as your own is strictly prohibited and will be reported to OSCCR.\n*   **Generative AI Policy:**  Generative AI tools like ChatGPT are permitted for individual and final projects, but **not** for written assignments. Using them for written work constitutes academic dishonesty.\n*   **Students with Disabilities:**  Contact Disability Access Services for accommodations and inform the instructor early in the semester.\n*   **Inclusivity:**  Maintain a respectful and inclusive learning environment. Inform the instructor of any name or pronoun preferences.\n\n### X. Key Takeaways and Advice\n\n*   **Hands-on Focus:** This course prioritizes practical application through projects.  The final project is a significant component.\n*   **Active Participation:** Active engagement in lectures, discussions, and exercises is crucial for understanding the material.\n*   **Communication:** Utilize Piazza effectively for course-related questions and contact the instructor via email for personal matters.\n*   **Academic Integrity:** Adhere strictly to academic integrity policies.\n*   **Time Management:** The coursework is demanding.  Effective time management and starting assignments early are essential for success.\n*   **TypeScript Pre-learning:**  Dedicate time to learn basic TypeScript before the deadline. This will significantly benefit your progress.\n*   **Group Work:**  Contribute equally to group projects and communicate effectively with your partner.  Unequal contributions may impact individual grades.\n\n\nThis comprehensive guide aims to equip you with the necessary information to succeed in CS5500. Refer to the syllabus for specific details and contact the instructor if you have any questions. Good luck!\n", "flashcards": []}