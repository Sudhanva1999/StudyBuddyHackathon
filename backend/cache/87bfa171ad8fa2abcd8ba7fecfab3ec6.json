{"transcript": {"text": "CS5500: Foundations of Software Engineering  Syllabus  Catalog Description This course covers the foundations of software engineering, including software development life cycle models (e.g., waterfall, incremental, agile); requirements analysis; testing (functional testing, structural testing, testing strategies); code refactoring and debugging; software architecture and design; and integration. Includes a course project where some of the software engineering methods (from requirements analysis to testing) are applied in a team-based setting.  Course Outcomes \u00a7 Build necessary skills to develop, manage, and maintain software.  \u00a7 Learn how to collect and define requirements for a software project.  \u00a7 Develop the skills to collaborate and manage teams in a software project.  \u00a7 Gain experience in full-stack development using a formal software engineering process.   Major Topics 1. Software processes \u00a7 Software process models \n\u00a7 Types of software process models 2. Requirements engineering \u00a7 Methods to define and manage requirements 3. Software architecture \u00a7 Architectural and design patterns 4. System modeling \u00a7 Modeling tools such as UML 5. Software testing \u00a7 Test-driven development \u00a7 Behavior-driven development 6. Software maintenance & evolution \u00a7 Continuous integration and delivery processes 7. Software Security \u00a7 Threat modeling \u00a7 Vulnerability detection and prevention All course material for the course will be distributed through Canvas.  The Tech Stack This course emphasizes hands-on experience with software engineering. Hence, you will apply software engineering concepts learned throughout the course to design, implement, test, and deliver/deploy a full-stack web application. To this end, we will use a combination of front-end and back-end frameworks, specifically Typescript, React, Node, Express, and MongoDB. All programming-related activities will use this tech \nstack. We will use modern software engineering tools that are applicable to this tech stack.   While the instructor will cover all aspects of the tech stack during lecture, you are expected to learn the basic concepts of the Typescript language on your own. To this end, we have provided relevant self-study sources and a practice lab in Canvas for you to get up to speed with TypeScript (See module on Programming: Self Study). We recommend that you finish this module before January 17th, 2025.   For the final project, you are allowed to use a different tech stack, however, you must make sure that all the tools that you are required to use in the final project are available in your chosen tech stack. The course staff is not guaranteed to provide support if you choose a different tech stack than what we are going to use for the assignments and other prorgramming-related activities.  Why this tech stack? We use this tech stack because it is widely used in industry and has support for all the tools we need to illustrate the various aspects of the software engineering process. We believe that you learn the broad concepts and gain practice in applying the concepts using one set of tools, you will be able to transfer those skills into another set of tools. Moreover, adapting to tools and tech stacks that you haven't worked with before is an essential skill in software engineering.   Course Meeting Times \nCS5500  Section 1 MR 11:45 \u2013 1:25 PM West Village H 108. CS5500 Section  2 TF 1:35 \u2013 3:15 PM West Village H 108. Both sections will cover the same material. Every attempt will be made to sync the two sections.   Recommended Textbooks \u00a7 Software Engineering, 10th Edition, by Ian Sommerville.  \u00a7 Refactoring: Improving the design of existing code by Martin Fowler and Kent Beck. \u00a7 UML Distilled by Martin Fowler. \u00a7 Polyglot Persistence by Martin Fowler and Pramod Sadalage. \u00a7 User Stories Applied: For Agile Software Development by Mike Cohn. \u00a7 Value Sensitive Design: Shaping technology with moral imagination by Batya Friedman and David G. Hendry.  Piazza \u00a7 The Piazza discussion board should be used for all communication with the teaching staff for questions about the course assignments and material. Email should be sent \nto individual instructors or teaching assistants only to schedule appointments. \u00a7 Piazza is a forum for additional learning and assistance. The following are not appropriate uses of Piazza: \u00a7 cyber-bullying \u00a7 posting memes \u00a7 complaining about a grade \u00a7 airing concerns/comments/criticisms about the course \u00a7 posting more than a few lines of source code from an attempt at a programming exercise or assignment \u00a7 posting the solution to an assignment or a link to a website containing the solution \u00a7 in general, anything unrelated to the course material and student learning \u00a7 Therefore, students are expected to use the Piazza forum for all non-personal, course-related communication. Questions about what an assignment is asking, technical problems that need troubleshooting, or other questions that might be of interest to other students must be posted to Piazza and not emailed to the instructor or a TA. \u00a7 If code is relevant to your Piazza question you may post only short code snippets. For more extensive help with reviewing or debugging your code, please visit office hours.  Email Etiquette \u00a7 Be professional and respectful. \n\u00a7 Begin your emails appropriately (e.g., Dear Prof. Mitra or just Joydeep). \u00a7 Email the course staff under the following circumstances: \u00a7 Canvas is not properly displaying a grade. \u00a7 One cannot attend office hours and would like to schedule an appointment to meet at another time. In this case, the student should include their availability for the upcoming week. \u00a7 If a student needs to contact the course staff about a private matter. Examples include: \u00a7 Making arrangements for disability accommodations. \u00a7 To discuss private, personal matters that are impacting one's coursework such as physical or mental illness, death in the family, etc. \u00a7 When emailing the instructor about the course, students should observe the following guidelines to ensure a timely response: \u00a7 use one's official @northeastern.edu email account \u00a7 use a descriptive subject line that includes \"CS 5500\" and a brief note on the topic (e.g., \"CS 5500: Appointment\")  Recordings Lectures will be recorded but will only be available on request to students who missed class due to illness or other emergency situations. As a general policy, students are expected to come to \nclass and actively participate in class discussions. The exercises accompanying each module can be completed most effectively if students come to class and participate in the discussions.  Assessments and Grading Exercises Lectures will be accompanied by exercises. These exercises will be either programming labs or discussion posts based on material covered in the lecture or additional readings. All exercises and their solution will be discussed by the instructor in class. Students are encouraged to come up with the solutions in class during time set out for peer discussion.  Assignments Assignments will be a combination of programming activities and software engineering process activities. There will be two individual projects to help students learn the tech stack needed to complete the final group project and explore different software architectures. The remaining assignments will be related to software engineering activities such as system modeling, testing, and threat modeling.  All assignments, except the assignment on threat modeling, must be completed individually. The threat modeling assignment is a group assignment.   Final Project \nThe final project is a group project. Groups are expected to do the following: \u00a7 Submit a proposal with the list of features they plan to implement.  \u00a7 Implementation and tests for the proposed features. \u00a7 The submission must include a project management plan and a continuous integration process. \u00a7 A presentation describing the key features, the development methodology, and challenges faced.  Group Work Policy Students are expected to form their own groups. Each group must have exactly two members. If students are unable to form groups then the course staff will assign them to a group. The course staff will attempt to group students with similar prior experience with the tech stack, however this is not guaranteed. Each group member will receive the same grade as the group's. However, individual grades may be adjusted if a student feels that their group members have not contributed equally and if there is evidence of unequal work distribution from git logs. Members in a group will have the opportunity to submit an evaluation of their group members anonymously.  Late Policy All exercises i.e., discussion posts and labs, and individual assignments can be submitted up to 48 hours late without any penalty. Group assignments cannot be submitted late. \nStudents who take this course are often surprised by just how much time this course requires of them. You are advised to budget your time wisely and to start working on an assignment the day it is posted.   Re-grades Any grading errors you believe you have found on a homework submission must be emailed to j.mitra@northeastern.edu with the subject line \"CS 5500: regrade request for Assignment X\". Time is a precious commodity, so please do not spend instructor office hours or TA office hours arguing about points. Regrade requests must be made in writing no later than one week after graded work is returned to the class. Regrade requests that are made later than one week from the date the graded work is returned to the class will not be honored.  Grading Scheme \u00a7 Assignments: 45% There will be five assignments -- two individual projects and three software engineering (SE) specific assignments. If there is additional time then I will add a sixth assignment (SE) to be completed individually. If I do I will announce it at least three weeks before the sixth assignment is released. Regardless the breakdown of the assignments are as follows: 1. 25% individual projects 2. 20% SE assignments \u00a7 Exercises: 10% \n\u00a7 Final Project: 30% 1. Proposal: 5% 2. Final Submission: 25% \u00a7 Final Presentation:  15%  Course Grade Cutoffs:     A [93-100],   A- [90-93),   B+ [87-90),   B [83-87),   B- [80-83),   C+ [77-80),   C [73-77),   C- [70-73),   F [0-70).  Course grade cutoffs are flexible and subject to change. Final scores will not be rounded.  Academic Integrity Each student must pursue their academic goals honestly and be personally accountable for all submitted work. Representing another person's work as your own is always wrong. Faculty are required to report any suspected instances of academic dishonesty to OSCCR. For more comprehensive information on academic integrity, including categories of academic dishonesty, please refer to the OSCCR website at https://osccr.sites.northeastern.edu/academic-integrity-policy/ and the Khoury website at https://www.khoury.northeastern.edu/information-for-\noverview/current-undergrad/undergraduate-advising-academic-support/academic-policies/.  Violation of academic integrity on any assigned homework will lead to a 0 on that homework. Repeated violations will result in a failing grade for the course. Violation of academic integrity on the final project will also result in a failing grade for the course.  Generative AI Policy You are allowed to use Generative AI tools like ChatGPT and others for the individual projects and the final project. These tools are increasingly becoming a part of the software engineering process, hence we allow you to use them in this course. However, you must not use these tools for written assignments such as discussions and other non-programming related assignments. Using them in such contexts will be considered a violation of academic integrity and the usual penalty for academic integrity violation outlined above will apply. If you are unsure check with the course staff before using it.  Students with Disabilities Students who have disabilities who wish to receive academic services and/or accommodations should visit the Disability Access Services. If you have already done so, please provide your letter from the DRC to me early in the semester so that I can arrange those accommodations. Inclusivity \nName and Pronoun Usage As this course includes class discussion, it is vitally important for us to create an educational environment of inclusion and mutual respect. This includes the ability for all students to have their chosen gender pronoun(s) and chosen name a<irmed. If the class roster does not align with your name and/or pronouns, please inform the instructor of the necessary changes.  Inclusion Statement We believe diversity and inclusiveness are essential to excellence in academic discourse and innovation. In this class, the perspective of people of all races, ethnicities, gender expressions and gender identities, religions, sexual orientations, disabilities, socioeconomic backgrounds, and nationalities will be respected and viewed as a resource and bene\ufb01t throughout the semester. Suggestions to further diversify class materials and assignments are encouraged. If any course meetings con\ufb02ict with your religious events, please do not hesitate to reach out to your instructor to make alternative arrangements. You are expected to treat your instructor and all other participants in the course with courtesy and respect. Disrespectful conduct and harassing statements will not be tolerated and may result in disciplinary actions. \n", "confidence": 1.0}, "summary": "# CS5500: Foundations of Software Engineering - Lecture Notes\n\nThese notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, covering key concepts, topics, and policies.\n\n## I. Introduction\n\nThis course aims to equip students with the foundational knowledge and practical skills necessary for developing, managing, and maintaining software.  It emphasizes a hands-on approach, incorporating a significant team-based project and utilizing a modern tech stack.\n\n## II. Course Objectives\n\nUpon successful completion of this course, students will be able to:\n\n*   Build and refine skills in software development, management, and maintenance.\n*   Effectively collect and define requirements for software projects.\n*   Collaborate and manage teams within a software project setting.\n*   Gain practical experience in full-stack development, adhering to a formal software engineering process.\n\n## III. Major Topics Covered\n\nThe course will delve into the following key areas:\n\n1.  **Software Processes**:\n    *   Software process models (e.g., waterfall, incremental, agile)\n    *   Different types and their application\n\n2.  **Requirements Engineering**:\n    *   Methods for defining, documenting, and managing software requirements\n\n3.  **Software Architecture**:\n    *   Architectural patterns (e.g., microservices, layered architecture)\n    *   Design patterns (e.g., Singleton, Factory, Observer)\n\n4.  **System Modeling**:\n    *   Introduction to Unified Modeling Language (UML) and its application in software design\n    *   Other relevant modeling tools and techniques\n\n5.  **Software Testing**:\n    *   Test-Driven Development (TDD) - writing tests before code\n    *   Behavior-Driven Development (BDD) - focusing on user behavior and acceptance criteria\n    *   Various testing strategies and techniques (unit, integration, system, acceptance)\n\n6.  **Software Maintenance & Evolution**:\n    *   Continuous Integration (CI) - frequently integrating code changes\n    *   Continuous Delivery (CD) - automating the release pipeline\n    *   Best practices for maintaining and evolving software systems\n\n7.  **Software Security**:\n    *   Threat modeling \u2013 identifying and mitigating potential security threats\n    *   Vulnerability detection and prevention techniques\n\n## IV. Technology Stack\n\nThe course will utilize the following technologies:\n\n*   **Frontend**: Typescript, React\n*   **Backend**: Node.js, Express.js\n*   **Database**: MongoDB\n\n**Rationale for this Stack:**\n\n*   Widely used in industry, providing relevant real-world experience.\n*   Supports the necessary tools for demonstrating various software engineering concepts.\n*   Promotes adaptability, a crucial skill in software engineering.\n\n**TypeScript Self-Study:** Students are expected to learn the basics of TypeScript independently before January 17th, 2025, utilizing provided resources and a practice lab on Canvas.\n\n**Alternative Tech Stacks for Final Project:** While allowed, using an alternative stack for the final project means limited support from the course staff.  Students are responsible for ensuring the chosen stack supports all required tools.\n\n\n## V. Course Logistics\n\n*   **Course Materials**: All course materials will be distributed through Canvas.\n*   **Course Meeting Times**:\n    *   Section 1: Monday and Thursday, 11:45 AM \u2013 1:25 PM, West Village H 108\n    *   Section 2: Tuesday and Friday, 1:35 PM \u2013 3:15 PM, West Village H 108\n*   **Recordings**: Lectures will be recorded and made available upon request for students who have missed class due to illness or emergencies. Regular attendance and participation are strongly encouraged.\n\n## VI. Recommended Textbooks\n\nThe following textbooks are recommended for supplementary reading and deeper understanding:\n\n*   Software Engineering, 10th Edition, by Ian Sommerville\n*   Refactoring: Improving the design of existing code by Martin Fowler and Kent Beck\n*   UML Distilled by Martin Fowler\n*   Polyglot Persistence by Martin Fowler and Pramod Sadalage\n*   User Stories Applied: For Agile Software Development by Mike Cohn\n*   Value Sensitive Design: Shaping technology with moral imagination by Batya Friedman and David G. Hendry\n\n\n## VII. Communication and Support\n\n*   **Piazza**: The primary platform for course-related communication, questions, and discussions.  Inappropriate uses include cyber-bullying, memes, grade complaints, and posting extensive code or solutions.\n*   **Email**: Reserved for personal matters, scheduling appointments, and reporting Canvas grading issues.  Use your Northeastern email address and a descriptive subject line (e.g., \"CS 5500: Appointment\").\n\n\n## VIII. Assessments and Grading\n\n*   **Exercises (10%):** Programming labs and discussion posts related to lecture material and readings. Solutions will be discussed in class.\n*   **Assignments (45%):**\n    *   Individual Projects (25%): Two projects focusing on the tech stack and software architectures.\n    *   Software Engineering (SE) Assignments (20%): Three (potentially four) assignments covering system modeling, testing, and threat modeling. The threat modeling assignment will be a group assignment.\n*   **Final Project (30%):** A group project (groups of two) involving a proposal, implementation, testing, a project management plan, continuous integration, and a final presentation.\n    *   Proposal (5%)\n    *   Final Submission (25%)\n*   **Final Presentation (15%):** Presentation of the final project.\n\n**Grading Scheme:**  A [93-100], A- [90-93), B+ [87-90), B [83-87), B- [80-83), C+ [77-80), C [73-77), C- [70-73), F [0-70). These cutoffs are subject to change.  Final scores will not be rounded.\n\n\n## IX. Course Policies\n\n*   **Group Work:** Students form their own groups of two. The course staff will assign groups if needed.  Individual grades may be adjusted based on peer evaluations and evidence of unequal contribution.\n*   **Late Policy:** Exercises and individual assignments can be submitted up to 48 hours late without penalty.  Group assignments cannot be submitted late.\n*   **Re-grades:** Submit regrade requests via email to j.mitra@northeastern.edu with the subject line \"CS 5500: regrade request for Assignment X\" within one week of graded work being returned.\n*   **Academic Integrity:**  All submitted work must be your own. Violations will result in a 0 on the assignment and potentially a failing grade for the course.  Report any suspected instances to OSCCR.  See the OSCCR and Khoury websites for more information.\n*   **Generative AI Policy:**  Allowed for individual and final projects, but *not* for written assignments.  Using generative AI for written assignments is considered an academic integrity violation.  Consult with course staff if unsure.\n*   **Students with Disabilities:** Contact Disability Access Services and provide documentation to the instructor for accommodations.\n*   **Inclusivity:**  Use preferred names and pronouns. Inform the instructor of any necessary changes to the roster.  Maintain a respectful and inclusive classroom environment.\n\n\n## X. Key Takeaways\n\nThis course provides a comprehensive introduction to software engineering principles and practices.  Active participation, collaboration, and adherence to the course policies are essential for success.  The hands-on approach, coupled with the modern tech stack, prepares students for real-world software development challenges.\n", "notes": "# CS5500: Foundations of Software Engineering - Detailed Lecture Notes\n\nThese notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, covering key concepts, topics, policies, and technologies.  They expand upon the provided transcription, adding context and detail where appropriate.\n\n## I. Introduction\n\nThis course aims to provide students with a strong foundation in software engineering principles and practices. The emphasis is on practical application, with a significant team-based final project and hands-on experience with a modern technology stack.  The goal is to prepare students for the challenges of real-world software development.\n\n## II. Course Objectives\n\nUpon successful completion of this course, students will be able to:\n\n*   **Develop, Manage, and Maintain Software:**  Gain the necessary skills to navigate the entire software lifecycle, from initial design to ongoing maintenance.\n*   **Elicit and Define Requirements:**  Effectively gather, analyze, and document software requirements from stakeholders.\n*   **Collaborate and Manage Teams:** Work effectively in teams, managing project timelines, communication, and contributions.\n*   **Gain Full-Stack Development Experience:**  Apply software engineering principles in a practical setting using a modern tech stack and a formal software engineering process.\n\n## III. Major Topics Covered\n\nThis course will cover a range of essential software engineering topics:\n\n1.  **Software Processes:**\n    *   **Software Process Models:**  Understanding different software development methodologies, including Waterfall, Incremental, and Agile, and their appropriate applications. This will involve comparing their strengths and weaknesses, and understanding how to choose the right model for a given project.\n    *   **Process Activities:** Deep dive into the activities within each process model, including planning, analysis, design, implementation, testing, and deployment.\n\n2.  **Requirements Engineering:**\n    *   **Elicitation and Analysis:** Techniques for gathering requirements from stakeholders, analyzing their needs, and resolving conflicts.\n    *   **Specification and Documentation:**  Clearly documenting requirements using various methods, including user stories, use cases, and formal specifications.\n    *   **Requirements Management:**  Managing changes to requirements throughout the project lifecycle.\n\n3.  **Software Architecture:**\n    *   **Architectural Patterns:**  Understanding common architectural patterns like Microservices, Layered Architecture, Client-Server, and their trade-offs.  This will involve analyzing the suitability of different architectures for various project types.\n    *   **Design Patterns:**  Exploring and applying common design patterns such as Singleton, Factory, Observer, and MVC (Model-View-Controller) to improve code organization, reusability, and maintainability.\n\n4.  **System Modeling:**\n    *   **Unified Modeling Language (UML):**  Learning to use UML diagrams (e.g., class diagrams, sequence diagrams, use case diagrams) for visualizing and communicating system design.\n    *   **Other Modeling Tools and Techniques:** Exploring other modeling tools and techniques beyond UML,  like data flow diagrams and state charts, to represent different aspects of a software system.\n\n5.  **Software Testing:**\n    *   **Test-Driven Development (TDD):**  Writing tests *before* writing code to ensure code quality and facilitate refactoring.\n    *   **Behavior-Driven Development (BDD):**  Focusing on user behavior and acceptance criteria to guide development.\n    *   **Testing Strategies and Techniques:**  Applying various testing methods, including unit testing, integration testing, system testing, and acceptance testing, to ensure software quality and reliability.\n\n6.  **Software Maintenance & Evolution:**\n    *   **Continuous Integration (CI):**  Frequently integrating code changes into a shared repository to identify and address integration issues early.  This will involve understanding the tools and practices used in CI pipelines.\n    *   **Continuous Delivery (CD):**  Automating the release pipeline to enable frequent and reliable software releases.  This includes exploring different deployment strategies and understanding the role of automation in CD.\n    *   **Best Practices:**  Adopting best practices for maintaining and evolving software systems, including code refactoring, version control, and documentation.\n\n7.  **Software Security:**\n    *   **Threat Modeling:**  Identifying and mitigating potential security threats early in the design process using various threat modeling methodologies like STRIDE and DREAD.\n    *   **Vulnerability Detection and Prevention:**  Learning about common software vulnerabilities (e.g., SQL injection, cross-site scripting) and techniques for preventing them.  This will involve understanding secure coding practices and security testing methods.\n\n## IV. Technology Stack\n\nThe course will primarily use the following technologies:\n\n*   **Frontend:** TypeScript, React\n*   **Backend:** Node.js, Express.js\n*   **Database:** MongoDB\n\n**Rationale:** This stack is chosen for its industry relevance, wide adoption, and support for various software engineering tools.  It promotes adaptability, a crucial skill in the ever-evolving tech landscape.\n\n**TypeScript Self-Study:** Students are expected to familiarize themselves with TypeScript basics before January 17th, 2025, using provided resources and a practice lab on Canvas.\n\n**Alternative Tech Stacks for Final Project:** While alternative stacks are permitted for the final project, this limits support from course staff. Students choosing an alternative stack are responsible for ensuring it supports all required tools and functionalities.\n\n## V. Course Logistics (Continued from Transcription)\n\n*  **Attendance and Participation:** While lecture recordings are available upon request for emergencies, regular attendance and active participation are strongly encouraged for optimal learning.  Exercises and in-class discussions are integral parts of the learning process.\n\n## VI. Recommended Textbooks (Continued from Transcription)\n\nThese texts offer additional insights and deeper understanding of the topics covered in the course.\n\n## VII. Communication and Support (Continued from Transcription)\n\n\n## VIII. Assessments and Grading (Continued from Transcription)\n\n\n## IX. Course Policies (Continued from Transcription)\n\n\n## X. Key Takeaways\n\nThis course provides a robust introduction to the principles and best practices of software engineering.  Active participation, collaboration, adherence to course policies, and hands-on project experience are essential for success. The course equips students with the skills and knowledge needed to tackle real-world software development challenges and thrive in the software engineering field.\n", "flashcards": []}