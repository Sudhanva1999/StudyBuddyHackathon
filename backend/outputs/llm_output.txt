# CS5500: Foundations of Software Engineering - Detailed Lecture Notes

These notes provide a comprehensive overview of the CS5500: Foundations of Software Engineering course, covering key concepts, topics, policies, and technologies.  They expand upon the provided transcription, adding context and detail where appropriate.

## I. Introduction

This course aims to provide students with a strong foundation in software engineering principles and practices. The emphasis is on practical application, with a significant team-based final project and hands-on experience with a modern technology stack.  The goal is to prepare students for the challenges of real-world software development.

## II. Course Objectives

Upon successful completion of this course, students will be able to:

*   **Develop, Manage, and Maintain Software:**  Gain the necessary skills to navigate the entire software lifecycle, from initial design to ongoing maintenance.
*   **Elicit and Define Requirements:**  Effectively gather, analyze, and document software requirements from stakeholders.
*   **Collaborate and Manage Teams:** Work effectively in teams, managing project timelines, communication, and contributions.
*   **Gain Full-Stack Development Experience:**  Apply software engineering principles in a practical setting using a modern tech stack and a formal software engineering process.

## III. Major Topics Covered

This course will cover a range of essential software engineering topics:

1.  **Software Processes:**
    *   **Software Process Models:**  Understanding different software development methodologies, including Waterfall, Incremental, and Agile, and their appropriate applications. This will involve comparing their strengths and weaknesses, and understanding how to choose the right model for a given project.
    *   **Process Activities:** Deep dive into the activities within each process model, including planning, analysis, design, implementation, testing, and deployment.

2.  **Requirements Engineering:**
    *   **Elicitation and Analysis:** Techniques for gathering requirements from stakeholders, analyzing their needs, and resolving conflicts.
    *   **Specification and Documentation:**  Clearly documenting requirements using various methods, including user stories, use cases, and formal specifications.
    *   **Requirements Management:**  Managing changes to requirements throughout the project lifecycle.

3.  **Software Architecture:**
    *   **Architectural Patterns:**  Understanding common architectural patterns like Microservices, Layered Architecture, Client-Server, and their trade-offs.  This will involve analyzing the suitability of different architectures for various project types.
    *   **Design Patterns:**  Exploring and applying common design patterns such as Singleton, Factory, Observer, and MVC (Model-View-Controller) to improve code organization, reusability, and maintainability.

4.  **System Modeling:**
    *   **Unified Modeling Language (UML):**  Learning to use UML diagrams (e.g., class diagrams, sequence diagrams, use case diagrams) for visualizing and communicating system design.
    *   **Other Modeling Tools and Techniques:** Exploring other modeling tools and techniques beyond UML,  like data flow diagrams and state charts, to represent different aspects of a software system.

5.  **Software Testing:**
    *   **Test-Driven Development (TDD):**  Writing tests *before* writing code to ensure code quality and facilitate refactoring.
    *   **Behavior-Driven Development (BDD):**  Focusing on user behavior and acceptance criteria to guide development.
    *   **Testing Strategies and Techniques:**  Applying various testing methods, including unit testing, integration testing, system testing, and acceptance testing, to ensure software quality and reliability.

6.  **Software Maintenance & Evolution:**
    *   **Continuous Integration (CI):**  Frequently integrating code changes into a shared repository to identify and address integration issues early.  This will involve understanding the tools and practices used in CI pipelines.
    *   **Continuous Delivery (CD):**  Automating the release pipeline to enable frequent and reliable software releases.  This includes exploring different deployment strategies and understanding the role of automation in CD.
    *   **Best Practices:**  Adopting best practices for maintaining and evolving software systems, including code refactoring, version control, and documentation.

7.  **Software Security:**
    *   **Threat Modeling:**  Identifying and mitigating potential security threats early in the design process using various threat modeling methodologies like STRIDE and DREAD.
    *   **Vulnerability Detection and Prevention:**  Learning about common software vulnerabilities (e.g., SQL injection, cross-site scripting) and techniques for preventing them.  This will involve understanding secure coding practices and security testing methods.

## IV. Technology Stack

The course will primarily use the following technologies:

*   **Frontend:** TypeScript, React
*   **Backend:** Node.js, Express.js
*   **Database:** MongoDB

**Rationale:** This stack is chosen for its industry relevance, wide adoption, and support for various software engineering tools.  It promotes adaptability, a crucial skill in the ever-evolving tech landscape.

**TypeScript Self-Study:** Students are expected to familiarize themselves with TypeScript basics before January 17th, 2025, using provided resources and a practice lab on Canvas.

**Alternative Tech Stacks for Final Project:** While alternative stacks are permitted for the final project, this limits support from course staff. Students choosing an alternative stack are responsible for ensuring it supports all required tools and functionalities.

## V. Course Logistics (Continued from Transcription)

*  **Attendance and Participation:** While lecture recordings are available upon request for emergencies, regular attendance and active participation are strongly encouraged for optimal learning.  Exercises and in-class discussions are integral parts of the learning process.

## VI. Recommended Textbooks (Continued from Transcription)

These texts offer additional insights and deeper understanding of the topics covered in the course.

## VII. Communication and Support (Continued from Transcription)


## VIII. Assessments and Grading (Continued from Transcription)


## IX. Course Policies (Continued from Transcription)


## X. Key Takeaways

This course provides a robust introduction to the principles and best practices of software engineering.  Active participation, collaboration, adherence to course policies, and hands-on project experience are essential for success. The course equips students with the skills and knowledge needed to tackle real-world software development challenges and thrive in the software engineering field.
